/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package calculator;

import org.junit.jupiter.api.Test;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;

import javax.swing.JButton; // my buttons are part of JButtonl
import javax.swing.JPanel;
import java.awt.*;

import calculator.panels.*;
import calculator.utilities.OperatorHandler;

class CalculatorUITest {
    private static Calculator calculator;
    private static DisplayPanel displayPanel;
    private static NumberKeyPanel numberKeyPanel;
    private static BinaryOpPanel binaryOpPanel;
    private static OperatorHandler operatorHandler;
    private static JPanel centerRegionPanel;

    @BeforeAll
    public static void setUpClass() {
        calculator = new Calculator();
        displayPanel = new DisplayPanel();
        operatorHandler = new OperatorHandler(displayPanel.getDisplay()); // Assumes DisplayPanel has a method
                                                                          // getDisplay() returning the JTextField
        numberKeyPanel = new NumberKeyPanel(operatorHandler);
        centerRegionPanel = new JPanel(new BorderLayout());
        binaryOpPanel = new BinaryOpPanel(centerRegionPanel, operatorHandler);

    }

    @BeforeEach
    public void resetDisplay() {
        displayPanel.getDisplay().setText(""); // Clear the display before each test
    }

    private JButton findButtonByActionCommand(String command) {
        // Search the number panel
        for (java.awt.Component comp : numberKeyPanel.getComponents()) {
            if (comp instanceof JButton) {
                JButton button = (JButton) comp;
                if (button.getActionCommand().equals(command)) {
                    return button;
                }
            }
        }
        // Search the binary operations panel
        for (java.awt.Component comp : binaryOpPanel.getComponents()) {
            if (comp instanceof JButton) {
                JButton button = (JButton) comp;
                if (button.getActionCommand().equals(command)) {
                    return button;
                }
            }
        }
        for (java.awt.Component comp : centerRegionPanel.getComponents()) {
            if (comp instanceof JButton) {
                JButton button = (JButton) comp;
                if (button.getActionCommand().equals(command)) {
                    return button;
                }
            }
        }

        return null; // If no button found with the specified command
    }

    @Test
    @DisplayName("Button [0] should write '0' to display")
    public void testWriteZeroToDisplay() {
        findButtonByActionCommand("0").doClick();
        assertEquals("0", displayPanel.getDisplay().getText());
    }

    @Test
    @DisplayName("8 - 3 should result in 5")
    public void testEightMinusThreeEqualsFive() {
        findButtonByActionCommand("8").doClick();
        findButtonByActionCommand("-").doClick();
        findButtonByActionCommand("3").doClick();
        findButtonByActionCommand("=").doClick();
        assertEquals("5", displayPanel.getDisplay().getText());
    }
}
